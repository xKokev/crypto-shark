{
  "version": 3,
  "sources": [
    "sharky.png",
    "components/Error.js",
    "hooks/useMoneda.js",
    "hooks/useCriptomoneda.js",
    "components/Formulario.js",
    "components/Cotizacion.js",
    "components/Spinner.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "MensajeError",
    "styled",
    "p",
    "Error",
    "mensaje",
    "Label",
    "label",
    "Select",
    "select",
    "useMoneda",
    "stateInicial",
    "opciones",
    "useState",
    "state",
    "actualizarState",
    "onChange",
    "e",
    "target",
    "value",
    "map",
    "opcion",
    "codigo",
    "nombre",
    "useCriptomoneda",
    "CoinInfo",
    "Name",
    "FullName",
    "Id",
    "Boton",
    "input",
    "Formulario",
    "guardarMoneda",
    "guardarCriptomoneda",
    "listacripto",
    "guardarCriptomonedas",
    "error",
    "guardarError",
    "moneda",
    "SelectMonedas",
    "criptomoneda",
    "SelectCripto",
    "useEffect",
    "a",
    "axios",
    "get",
    "resultado",
    "data",
    "Data",
    "consultarAPI",
    "onSubmit",
    "preventDefault",
    "type",
    "ResultadoDiv",
    "div",
    "Info",
    "Precio",
    "Cotizacion",
    "Object",
    "keys",
    "length",
    "console",
    "log",
    "PRICE",
    "HIGHDAY",
    "LOWDAY",
    "CHANGEPCT24HOUR",
    "LASTUPDATE",
    "Spinner",
    "class",
    "Contenedor",
    "Imagen",
    "img",
    "Heading",
    "h1",
    "App",
    "guardarResultado",
    "cargando",
    "guardarCargando",
    "url",
    "setTimeout",
    "DISPLAY",
    "cotizarCriptomoneda",
    "componente",
    "src",
    "imagen",
    "alt",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister"
  ],
  "mappings": "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",
  "file": "static/js/main.43ec8cc6.chunk.js",
  "sourcesContent": [
    "export default __webpack_public_path__ + \"./docs/static/media/sharky.ad817a17.png\";",
    "import React from 'react';\nimport styled from '@emotion/styled';\n\nconst MensajeError = styled.p`\n  background-color: #b7322c;\n  padding: 1rem;\n  color: #fff;\n  font-size: 30px;\n  text-transform: uppercase;\n  font-weight: bold;\n  text-align: center;\n  font-family: 'Bebas Neue', cursive;\n`;\n\nconst Error = ({ mensaje }) => {\n  return <MensajeError>{mensaje}</MensajeError>;\n};\n\nexport default Error;\n",
    "import React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n  font-family: 'Bebas Neue', cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 2.4rem;\n  margin-top: 2rem;\n  display: block;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`;\n\nconst useMoneda = (label, stateInicial, opciones) => {\n  // State de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  const Seleccionar = () => (\n    <Fragment>\n      <Label>{label}</Label>\n      <Select onChange={(e) => actualizarState(e.target.value)} value={state}>\n        <option value=''>-💲 Select 💲-</option>\n        {opciones.map((opcion) => (\n          <option key={opcion.codigo} value={opcion.codigo}>\n            {opcion.nombre}\n          </option>\n        ))}\n      </Select>\n    </Fragment>\n  );\n\n  // Retornar state, interfaz y fn que modifica el state\n  return [state, Seleccionar, actualizarState];\n};\n\nexport default useMoneda;\n",
    "import React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n  font-family: 'Bebas Neue', cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 2.4rem;\n  margin-top: 2rem;\n  display: block;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`;\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n  // console.log(opciones);\n\n  // State de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  const SelectCripto = () => (\n    <Fragment>\n      <Label>{label}</Label>\n      <Select onChange={(e) => actualizarState(e.target.value)} value={state}>\n        <option value=''>- 🪙 Select 🪙-</option>\n        {opciones.map((opcion) => (\n          <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>\n            {opcion.CoinInfo.FullName}\n          </option>\n        ))}\n      </Select>\n    </Fragment>\n  );\n\n  // Retornar state, interfaz y fn que modifica el state\n  return [state, SelectCripto, actualizarState];\n};\n\nexport default useCriptomoneda;\n",
    "import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\n\nimport Error from './Error';\nimport useMoneda from '../hooks/useMoneda';\nimport useCriptomoneda from '../hooks/useCriptomoneda';\nimport axios from 'axios';\n\nconst Boton = styled.input`\n  margin-top: 20px;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border: none;\n  width: 100%;\n  border-radius: 10px;\n  color: #fff;\n  transition: background-color 0.3s ease;\n  &:hover {\n    background-color: #326ac0;\n    cursor: pointer;\n  }\n`;\n\nconst Formulario = ({ guardarMoneda, guardarCriptomoneda }) => {\n  // state del listado de criptomonedas\n  const [listacripto, guardarCriptomonedas] = useState([]);\n  const [error, guardarError] = useState(false);\n\n  const MONEDAS = [\n    { codigo: 'USD', nombre: '🇺🇸 U.S. dollar' },\n    { codigo: 'EUR', nombre: '🇪🇺 Euro' },\n    { codigo: 'CAD', nombre: '🇨🇦 Canadian dollar' },\n    { codigo: 'GBP', nombre: '🏴󠁧󠁢󠁥󠁮󠁧󠁿 Pound sterling' },\n    { codigo: 'ILS', nombre: '🇮🇱 Israeli shekel' },\n    { codigo: 'AED', nombre: '🇦🇪 Dírham' },\n    { codigo: 'AED', nombre: '🇦🇺 Australian dollar' },\n    { codigo: 'JPY', nombre: '🇯🇵 Japanese Yen' },\n    { codigo: 'CNY', nombre: '🇨🇳 Yuan' },\n    { codigo: 'MXN', nombre: '🇲🇽 Mexican peso' },\n  ];\n\n  // Utilizar useMoneda\n  const [moneda, SelectMonedas] = useMoneda(\n    'Choose your Currency',\n    '',\n    MONEDAS\n  );\n\n  // utilizar useCriptomoneda\n  const [criptomoneda, SelectCripto] = useCriptomoneda(\n    'Choose your Cryptocurrency',\n    '',\n    listacripto\n  );\n\n  // Ejecutar llamado a la API\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url =\n        'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n\n      const resultado = await axios.get(url);\n\n      guardarCriptomonedas(resultado.data.Data);\n    };\n    consultarAPI();\n  }, []);\n\n  // cuando el usuario hace submit\n  const cotizarMoneda = (e) => {\n    e.preventDefault();\n\n    // validar si ambos campos estan llenos\n    if (moneda === '' || criptomoneda === '') {\n      guardarError(true);\n      return;\n    }\n\n    // pasar los datos al componente principal\n    guardarError(false);\n    guardarMoneda(moneda);\n    guardarCriptomoneda(criptomoneda);\n  };\n\n  return (\n    <form onSubmit={cotizarMoneda}>\n      {error ? <Error mensaje='All fields are required' /> : null}\n\n      <SelectMonedas />\n\n      <SelectCripto />\n\n      <Boton type='submit' value='Calculate' />\n    </form>\n  );\n};\n\nexport default Formulario;\n",
    "import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ResultadoDiv = styled.div`\n  color: #fff;\n  font-family: Arial, Helvetica, sans-serif;\n`;\n\nconst Info = styled.p`\n  font-size: 18px;\n  span {\n    font-weight: bold;\n  }\n`;\nconst Precio = styled.p`\n  font-size: 30px;\n  span {\n    font-weight: bold;\n  }\n`;\n\nconst Cotizacion = ({ resultado }) => {\n  if (Object.keys(resultado).length === 0) return null;\n\n  console.log(resultado);\n\n  return (\n    <ResultadoDiv>\n      <Precio>\n        The price is: <span>{resultado.PRICE}</span>{' '}\n      </Precio>\n      <Info>\n        Highest price of the day: <span>{resultado.HIGHDAY}</span>{' '}\n      </Info>\n      <Info>\n        Lowest price of the day: <span>{resultado.LOWDAY}</span>{' '}\n      </Info>\n      <Info>\n        Variation last 24 hours: <span>{resultado.CHANGEPCT24HOUR}</span>{' '}\n      </Info>\n      <Info>\n        Last Update: <span>{resultado.LASTUPDATE}</span>{' '}\n      </Info>\n    </ResultadoDiv>\n  );\n};\n\nexport default Cotizacion;\n",
    "import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div class='sk-chase'>\n      <div class='sk-chase-dot'></div>\n      <div class='sk-chase-dot'></div>\n      <div class='sk-chase-dot'></div>\n      <div class='sk-chase-dot'></div>\n      <div class='sk-chase-dot'></div>\n      <div class='sk-chase-dot'></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n",
    "import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport imagen from './sharky.png';\nimport Formulario from './components/Formulario';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\nimport styled from '@emotion/styled';\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n`;\n\nfunction App() {\n  const [moneda, guardarMoneda] = useState('');\n  const [criptomoneda, guardarCriptomoneda] = useState('');\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n    const cotizarCriptomoneda = async () => {\n      // evitamos la ejecución la primera vez\n      if (moneda === '') return;\n\n      // consultar la api para obtener la cotizacion\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n      const resultado = await axios.get(url);\n\n      // mostrar el spinner\n      guardarCargando(true);\n\n      // ocultar el spinner y mostrar el resultado\n      setTimeout(() => {\n        // cambiar el estado de cargando\n        guardarCargando(false);\n\n        // guardar cotizacion\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 3000);\n    };\n    cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  // Mostrar spinner o resultado\n  const componente = cargando ? (\n    <Spinner />\n  ) : (\n    <Cotizacion resultado={resultado} />\n  );\n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt='imagen cripto' />\n      </div>\n      <div>\n        <Heading>🦈 Crypto-Shark </Heading>\n\n        <Formulario\n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
